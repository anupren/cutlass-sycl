name: Coverity Scan

# We only want to test official release code, not every pull request.
on:
  push:
    branches:
    - arenikun/coverity_local_test
  workflow_dispatch:
    inputs:
      DPCPP_VERSION:
        description: "DPCPP version to use"
        type: string

     
permissions: read-all

env:
  no_proxy: "127.0.0.1,localhost,apt.repos.intel.com,mlpc.intel.com,*.intel.com"
  project: ${{ github.repository }}
  build_language: cxx
  working-directory: ${{ github.workspace }}
  build_platform: linux64 

jobs:
  coverity:
    runs-on: PVC
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - name: Install Intel graphics drivers
        uses: ./.github/actions/install-intel-graphics
        with:
          GPU: PVC
          IGC: ROLLING

      - name: Install DPC++
        uses: ./.github/actions/install-dpcpp
        with:
          DPCPP_RELEASE: RELEASE
          DPCPP_VERSION: ${{ inputs.DPCPP_VERSION }}
          GPU: PVC
          IGC: ROLLING

      - name: Setup virtual environment
        shell: bash
        run: |
          # Install cmake and ninja if not already available
          if ! command -v cmake &> /dev/null || ! command -v ninja &> /dev/null; then
            echo "Installing cmake and/or ninja..."
            sudo apt update
            sudo apt install -y cmake ninja-build
          else
            echo "cmake and ninja already available"
          fi
          . setvars.sh
          export IGC_ExtraOCLOptions="-cl-intel-256-GRF-per-thread"
          export SYCL_PROGRAM_COMPILE_OPTIONS="-ze-opt-large-register-file -gline-tables-only"
          export ONEAPI_DEVICE_SELECTOR=level_zero:gpu
          export IGC_VectorAliasBBThreshold=100000000000
          # Persist environment variables to following steps 
          env >> $GITHUB_ENV
          which $CXX
          $CXX --version
          sycl-ls

      - name: Build
        shell: bash
        run: |
          cmake -G Ninja  \
            -DCUTLASS_ENABLE_SYCL=ON \
            -DDPCPP_SYCL_TARGET=intel_gpu_pvc \
            -DCMAKE_CXX_FLAGS="-Werror" \
            -DCUTLASS_SYCL_RUNNING_CI=ON

      - name: URL encode project name
        id: project
        run: echo "project=${{ env.project }}" | sed -e 's:/:%2F:g' -e 's/ /%20/g' >> $GITHUB_OUTPUT
        shell: bash

      # The Coverity site says the tool is usually updated twice yearly, so the
      # md5 of download can be used to determine whether there's been an update.
      - name: Lookup Coverity Build Tool hash
        id: coverity-cache-lookup
        run: |
          hash=$(curl https://scan.coverity.com/download/${{ env.build_language }}/linux64 \
                  --data "token=${TOKEN}&project=${{ steps.project.outputs.project }}&md5=1"); \
          echo "hash=${hash}" >> $GITHUB_OUTPUT
        shell: bash
        env:
          TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}

      # Try to cache the tool to avoid downloading 1GB+ archive on every run.
      # Cache miss will add ~30s to create, but cache hit will save minutes.
      - name: Cache Coverity Build Tool
        id: cov-build-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.working-directory }}/cov-analysis
          key: cov-build-${{ env.build_language }}-linux64-${{ steps.coverity-cache-lookup.outputs.hash }}

      - name: Download Coverity Build Tool (${{ env.build_language }} / ${{ env.build_platform }})
        if: steps.cov-build-cache.outputs.cache-hit != 'true'
        run: |
          curl https://scan.coverity.com/download/${{ env.build_language }}/${{ env.build_platform }} \
            --no-progress-meter \
            --output cov-analysis.tar.gz \
            --data "token=${TOKEN}&project=${{ steps.project.outputs.project }}"
        shell: bash
        working-directory: ${{ env.working-directory }}
        env:
          TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}

      - if: steps.cov-build-cache.outputs.cache-hit != 'true'
        run: mkdir cov-analysis
        shell: bash
        working-directory: ${{ env.working-directory }}
      - if: steps.cov-build-cache.outputs.cache-hit != 'true'
        run: tar -xzf cov-analysis.tar.gz --strip 1 -C cov-analysis
        shell: bash
        working-directory: ${{ env.working-directory }}
      
      - name: Configure Coverity Compiler
        shell: bash
        run: |
          echo "Configuring Coverity for icpx compiler..."
          
          # Source DPC++ environment to get icpx
          . setvars.sh
          
          # Configure Coverity for icpx compiler
          ${{ github.workspace}}/cov-analysis/bin/cov-configure \
            --template \
            --comptype intel_icpx \
            --compiler icpx || {
            echo "ERROR: Failed to configure Coverity for icpx compiler"
            exit 1
          }
          
          echo "Coverity compiler configuration completed"
      - name: Build with cov-build
        run: |
          export PATH="${PWD}/cov-analysis/bin:${PATH}"
          cov-build --dir cov-int cmake --build .
        working-directory: ${{ env.working-directory }}

      - name: Archive results
        run: tar -czvf cov-int.tgz cov-int
        shell: bash
        working-directory: ${{ env.working-directory }}
