name: "Nightly Benchmarks Test"

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:
    inputs:
      DPCPP_VERSION:
        description: "DPCPP version to use"
        type: string

permissions: {}
env:
  no_proxy: "127.0.0.1,localhost,apt.repos.intel.com,mlpc.intel.com,*.intel.com"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  run-tests:
    strategy:
      matrix:
        include:
          # - compiler: NIGHTLY
          #   gpu: BMG
          #   intel_graphics: STAGING
          #   sycl_target: intel_gpu_bmg_g21
          #   runner: bmg
          # - compiler: RELEASE
          #   gpu: BMG
          #   intel_graphics: STAGING
          #   sycl_target: intel_gpu_bmg_g21
          #   runner: bmg
          # - compiler: NIGHTLY
          #   gpu: BMG
          #   intel_graphics: ROLLING
          #   sycl_target: intel_gpu_bmg_g21
          #   runner: bmg
          # - compiler: RELEASE
          #   gpu: BMG
          #   intel_graphics: ROLLING
          #   sycl_target: intel_gpu_bmg_g21
          #   runner: bmg
          - compiler: RELEASE
            gpu: PVC
            intel_graphics: ROLLING
            sycl_target: intel_gpu_pvc
            igc_version_major: 2
            igc_version_minor: 18
            runner: pvc
          # - compiler: NIGHTLY
          #   gpu: PVC
          #   intel_graphics: ROLLING
          #   sycl_target: intel_gpu_pvc
          #   runner: pvc

    name: Run Intel ${{ matrix.compiler }} tests on ${{ matrix.gpu }} with intel-graphics ${{ matrix.intel_graphics }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 180

    steps:
      - name: Checkout repository
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
      # For a specific DPC++ nightly build define the repository variable DPCPP_VERSION
      # for example using the tag: 'nightly-2024-04-22'
      - name: Install Intel graphics drivers
        uses: ./.github/actions/install-intel-graphics
        with:
          GPU: ${{ matrix.gpu }}
          IGC: ${{ matrix.intel_graphics }}
      - name: Install DPC++
        uses: ./.github/actions/install-dpcpp
        with:
          DPCPP_RELEASE: ${{ matrix.compiler }}
          DPCPP_VERSION: ${{ inputs.DPCPP_VERSION }}
          GPU: ${{ matrix.gpu }}
          IGC: ${{ matrix.intel_graphics }}
      - name: Setup virtual environment
        shell: bash
        run: |
          # Install cmake and ninja if not already available
          if ! command -v cmake &> /dev/null || ! command -v ninja &> /dev/null; then
            echo "Installing cmake and/or ninja..."
            sudo apt update
            sudo apt install -y cmake ninja-build
          else
            echo "cmake and ninja already available"
          fi
          . setvars.sh
          export IGC_ExtraOCLOptions="-cl-intel-256-GRF-per-thread"
          export SYCL_PROGRAM_COMPILE_OPTIONS="-ze-opt-large-register-file -gline-tables-only"
          export ONEAPI_DEVICE_SELECTOR=level_zero:gpu
          export IGC_VectorAliasBBThreshold=100000000000
          # Persist environment variables to following steps 
          env >> $GITHUB_ENV
          which $CXX
          $CXX --version
          sycl-ls
      - name: Build
        shell: bash
        run: |
          cmake -G Ninja  \
            -DCUTLASS_ENABLE_SYCL=ON \
            -DDPCPP_SYCL_TARGET=${{ matrix.sycl_target }} \
            -DCUTLASS_SYCL_RUNNING_CI=ON \
            -DIGC_VERSION_MAJOR=${{ matrix.igc_version_major }} \
            -DIGC_VERSION_MINOR=${{ matrix.igc_version_minor }} \
            -DCUTLASS_ENABLE_BENCHMARKS=ON \
            -DCMAKE_CXX_FLAGS="-Werror" \
            -DCUTLASS_ENABLE_TESTS=ON 
          cmake --build . 
      - name: Benchmarks
        shell: bash
        run: |
          if [ "${{ matrix.runner }}" == "bmg" ]; then
          ./benchmarks/flash_attention/flash_attention_prefill/cutlass_benchmarks_flash_attention_prefill_xe --config_file=../benchmarks/device/bmg/input_files/input_sglang_flash_attention_prefill_extend_nokvcache.in  2>&1 | tee bmg_attn_prefill_nokvcache_main.log
          ./benchmarks/flash_attention/flash_attention_prefill_cachedKV/cutlass_benchmarks_flash_attention_prefill_cachedkv_xe --config_file=../benchmarks/device/bmg/input_files/input_sglang_flash_attention_prefill_extend_kvcache.in  2>&1 | tee bmg_attn_prefill_kvcache_main.log
          ./benchmarks/flash_attention/flash_attention_decode/cutlass_benchmarks_flash_attention_decode_xe --config_file=../benchmarks/device/bmg/input_files/input_sglang_flash_attention_decode_kvcache.in  2>&1 | tee bmg_attn_decode_kvcache_main.log
          ./benchmarks/flash_attention/flash_attention_decode/cutlass_benchmarks_flash_attention_decode_xe --config_file=../benchmarks/device/bmg/input_files/input_sglang_flash_attention_decode_nokvcache.in  2>&1 | tee bmg_attn_decode_nokvcache_main.log
          ./benchmarks/gemm/cutlass_benchmarks_gemm_sycl --config_file=../benchmarks/device/bmg/input_files/input_sglang_gemm.in 2>&1 | tee bmg_gemm_main.log
          ./benchmarks/gemm/cutlass_benchmarks_gemm_sycl --config_file=../benchmarks/device/bmg/input_files/input_sglang_gemm_splitk.in  2>&1 | tee bmg_gemm_splitk_main.log 
          ./benchmarks/gemm/cutlass_benchmarks_gemm_sycl --config_file=../benchmarks/device/bmg/input_files/input_sglang_gemm_mixed_dtype.in  2>&1 | tee bmg_gemm_mixed_dtype_main.log 
          ./benchmarks/gemm/cutlass_benchmarks_gemm_sycl --config_file=../benchmarks/device/bmg/input_files/input_sglang_linear.in 2>&1 | tee bmg_gemm_linear_main.log 
          elif [ "${{ matrix.runner }}" == "pvc" ]; then
          ./benchmarks/flash_attention/flash_attention_prefill/cutlass_benchmarks_flash_attention_prefill_xe --config_file=./benchmarks/device/pvc/input_files/input_flash_attention_prefill.in  2>&1 | tee pvc_attn_prefill_nokvcache_main.log 
          ./benchmarks/gemm/cutlass_benchmarks_gemm_sycl --config_file=./benchmarks/device/pvc/input_files/input_gemm.in 2>&1 | tee pvc_gemm_main.log 
          ./benchmarks/gemm/cutlass_benchmarks_gemm_sycl --config_file=./benchmarks/device/pvc/input_files/input_linear.in 2>&1 | tee pvc_gemm_linear_main.log 
          ./benchmarks/gemm/cutlass_benchmarks_gemm_sycl --config_file=./benchmarks/device/pvc/input_files/input_pytorch_2.in 2>&1 | tee pvc_gemm_pytorch2_main.log 
          fi
          
      - name: Cleanup DPC++
        if: always()
        shell: bash
        run: |
          echo "Cleaning up DPC++ installation..."
          # Remove DPCPP directory if it exists
          DPCPP_PATH="${{ inputs.DPCPP_PATH || '~/dpcpp' }}"
          DPCPP_PATH=$(eval echo $DPCPP_PATH)  # Expand ~ to home directory
          if [ -d "$DPCPP_PATH" ]; then
            echo "Removing DPCPP directory: $DPCPP_PATH"
            sudo rm -rf "$DPCPP_PATH"
          fi
          # For RELEASE installs, remove OneAPI packages
          if [[ "${{ matrix.compiler }}" == "RELEASE" ]]; then
            echo "Removing OneAPI packages..."
            sudo apt remove -y intel-oneapi-runtime-libs intel-oneapi-compiler-dpcpp-cpp || true
            sudo rm -f /etc/apt/sources.list.d/oneAPI.list
            sudo rm -f /usr/share/keyrings/oneapi-archive-keyring.gpg
          fi
          # Clean up environment files
          rm -f setvars.sh
          # Clean up build artifacts
          rm -rf build/ || true
          # Reset environment variables that might interfere
          unset CC CXX CPLUS_INCLUDE_PATH C_INCLUDE_PATH LD_LIBRARY_PATH
          unset IGC_ExtraOCLOptions SYCL_PROGRAM_COMPILE_OPTIONS ONEAPI_DEVICE_SELECTOR IGC_VectorAliasBBThreshold
          echo "DPC++ cleanup completed"

      - name: Upload Benchmark Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runner }}-benchmark-logs-${{ matrix.compiler }}-intel-graphics-${{ matrix.intel_graphics }}
          path: |
            *.log
